import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from ydata_profiling import ProfileReport
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error

# Configura√ß√£o do Streamlit
st.set_page_config(page_title="Previs√£o de Rendas", page_icon="üìä", layout="wide")
# Centraliza o t√≠tulo
st.markdown("<h1 style='text-align: center;'>Previs√£o de Renda</h1>", unsafe_allow_html=True)

# Carregar dados
@st.cache_data
def load_data():
    df = pd.read_csv('./input/previsao_de_renda.csv').drop(columns=['Unnamed: 0'])
    return df
renda = load_data()

# Exibir informa√ß√µes b√°sicas
st.subheader("üìä Informa√ß√µes sobre os dados")
st.write(renda.info())
st.write(renda.head())

# Matriz de correla√ß√£o
st.subheader("üìà Matriz de Correla√ß√£o")
renda_numerico = renda.select_dtypes(include=np.number)
correlacao = renda_numerico.corr()
fig, ax = plt.subplots(figsize=(10, 8))
sns.heatmap(correlacao, annot=True, fmt=".2f", cmap="coolwarm", ax=ax)
st.pyplot(fig)

st.subheader("- O clustermap refor√ßa a observa√ß√£o de baixa correla√ß√£o entre a maioria das vari√°veis e a `renda`. Destaca-se a vari√°vel `tempo_emprego`, que apresenta uma correla√ß√£o positiva moderada com a renda, sugerindo que indiv√≠duos com mais tempo de emprego tendem a ter rendas mais altas. As vari√°veis booleanas `posse_de_imovel` e `posse_de_veiculo` mostram correla√ß√µes fracas com a renda, indicando que a posse desses bens tem pouca influ√™ncia na renda dos indiv√≠duos na amostra.")

st.text("")

# Matriz de dispers√£o
st.subheader("üìä Matriz de Dispers√£o")
fig = sns.pairplot(renda_numerico).fig  # Cria a figura a partir do PairGrid
st.pyplot(fig)  # Exibe a figura no Streamlit
st.subheader("- A an√°lise do pairplot, que exibe a matriz de dispers√£o entre todas as vari√°veis quantitativas, revela a presen√ßa de outliers na vari√°vel renda. Esses outliers, embora raros, podem distorcer a an√°lise de tend√™ncia, exigindo considera√ß√£o cuidadosa em modelagens futuras. Al√©m disso, a baixa densidade de pontos fora da diagonal principal do pairplot sugere uma fraca correla√ß√£o linear entre as vari√°veis quantitativas. Essa observa√ß√£o corrobora os resultados da matriz de correla√ß√£o, que tamb√©m indicou baixos coeficientes de correla√ß√£o entre as mesmas vari√°veis.")

st.text("")

# Gr√°fico de dispers√£o
st.subheader("üìâ Renda vs. Tempo de Emprego por Tipo de Renda e Idade")
fig, ax = plt.subplots(figsize=(16, 9))
sns.scatterplot(x='tempo_emprego', y='renda', hue='tipo_renda', size='idade', data=renda,
                alpha=0.6, sizes=(20, 200), palette='viridis', ax=ax)
sns.regplot(x='tempo_emprego', y='renda', data=renda, scatter=False, color='red',
            line_kws={'linewidth': 2}, ax=ax)
st.pyplot(fig)

st.markdown(
    "<div style='text-align: center;'>"
    "<h2>Renda vs. Tempo de Emprego por Tipo de Renda e Idade</h2>"
    "</div>",
    unsafe_allow_html=True
)
st.subheader("""
             
Este gr√°fico explora a rela√ß√£o entre renda e tempo de emprego, diferenciando por tipo de renda e idade.

**Observa√ß√µes Principais:**

* **Tend√™ncia Positiva:** A renda tende a aumentar com o tempo de emprego, conforme indicado pela linha de tend√™ncia.
* **Dispers√£o:** A alta dispers√£o dos pontos sugere que outros fatores, al√©m do tempo de emprego, influenciam a renda.
* **Diferencia√ß√£o:** A diferencia√ß√£o por tipo de renda e idade revela padr√µes distintos na rela√ß√£o entre essas vari√°veis e a renda.
* **Outliers:** Pontos com renda excepcionalmente alta destacam casos de sucesso not√°veis.

**Pontos-chave:**

* A linha de tend√™ncia mostra uma correla√ß√£o positiva entre tempo de emprego e renda.
* A distribui√ß√£o dos pontos indica que a renda √© influenciada por m√∫ltiplos fatores.
* A legenda detalha os tipos de renda e as faixas de idade representadas no gr√°fico.
* Outliers sugerem a presen√ßa de indiv√≠duos com rendas significativamente acima da m√©dia." "
""")

# Gerar Pandas Profiling Report
st.header("üìë Pandas Profiling Report")
if "profiling_report" not in st.session_state:
    prof = ProfileReport(df=renda, minimal=False, explorative=True)
    output_path = './output/renda_analysis.html'
    prof.to_file(output_path)
    st.session_state.profiling_report_path = output_path

# Exibir o relat√≥rio
with open(st.session_state.profiling_report_path, 'r', encoding='utf-8') as f:
    html_content = f.read()
st.components.v1.html(html_content, height=1000, scrolling=True)

# Modelagem de dados
st.header("ü§ñ Modelagem de dados")
X = renda_numerico.drop('renda', axis=1)
y = renda['renda']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Modelos de Regress√£o
st.subheader("üå≥ Modelos de Regress√£o")

@st.cache_resource
def train_decision_tree(X_train, y_train, X_test, y_test):
    model = DecisionTreeRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    return mse
st.write(f"Erro Quadr√°tico M√©dio (MSE) - √Årvore de Decis√£o: {train_decision_tree(X_train, y_train, X_test, y_test)}")

@st.cache_resource
def train_random_forest(X_train, y_train, X_test, y_test):
    model = RandomForestRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    return mse
st.write(f"Erro Quadr√°tico M√©dio (MSE) - Floresta Aleat√≥ria: {train_random_forest(X_train, y_train, X_test, y_test)}")

# Otimiza√ß√£o de Hiperpar√¢metros
st.subheader("‚öôÔ∏è Otimiza√ß√£o de Hiperpar√¢metros")
if st.button("Otimizar Modelo"):
    param_grid = {
        'n_estimators': [10, 50, 100],
        'max_depth': [None, 10, 20],
        'min_samples_split': [2, 5, 10]
    }
    grid_search = GridSearchCV(RandomForestRegressor(random_state=42), param_grid, cv=5)
    grid_search.fit(X_train, y_train)
    st.session_state.best_params = grid_search.best_params_
    st.session_state.best_score = grid_search.best_score_
    st.rerun()

# Exibir os melhores par√¢metros
if "best_params" in st.session_state:
    st.write(f"Melhores par√¢metros: {st.session_state.best_params}")
    st.write(f"Melhor pontua√ß√£o: {st.session_state.best_score}")